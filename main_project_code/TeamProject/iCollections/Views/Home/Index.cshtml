@{
    ViewData["Title"] = "Home Page";
}


@*<div class="col">
    <p>@ViewBag.Message</p>
</div>*@

<section class="clear-section" id="landing-area">
    <div class="container-fluid">
        <div class="row">
            <div class="col-6">
                <h1 class="main-title">iCollections</h1>
                <p>The best way to share your collections and collectables</p>
            </div>
            <div class="col-6">
                <img src="img/landing_sample.JPG" class="landing-image" alt="ICollections landing image"/>
            </div>
        </div>
    </div>
</section>

<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Project Purpose and Vision</h1>
        <p>For anyone who wants a easy and fun way to share with others their collections or collectables, the 360 iCollectables Creator can upload and render photos of their collectable items that will be displayed in 2D, 360 degree, or possibly 360 full virtual environment. The system will store the users uploaded photos of items, allow user selection of the available environments, and give the ability to place their items into the environment at specific locations, and then allow others to view their environments filled with their collectable items. Unlike albums of photos our users will be able to show off large collections of items in a single format that can easily show the scale of the collection, while maintaining the ability to inspect individual items closely.</p>
    </div>
</section>

<section class="clear-section" id="">
    <div class="container-fluid">
        <h1 class="text-center">Disclaimer</h1>
        <h3 class="text-center">This Web Application is a Senior Capstone Project</h3>
        <h3 class="text-center">CS 461 & CS 462</h3>
        <h3 class="text-center">Western Oregon University</h3>
        <h3 class="text-center">Our Team Members Include:</h3>
        <hr/>
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5">
            <div class="col mb-4">
                <a href="https://github.com/baltazarO"><strong>Baltazar Ortiz</strong></a>
            </div>
            <div class="col mb-4">
                <a href="https://github.com/reilly-cuauhtemoc-8178"><strong>Cuauhtemoc Reilly</strong></a>
            </div>
            <div class="col mb-4">
                <a href="https://github.com/drussell33"><strong>Derek Russell</strong></a>
            </div>
            <div class="col mb-4">
                <a href="https://github.com/Rafarell"><strong>Rafael Arellano</strong></a>
            </div>
        </div>
    </div>
</section>

<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Description of Features</h1>
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5">
        <div class="col mb-4">
            <div class="card">
                <img src="img/photo_feature.jpg" class="card-img-top" alt="...">
                <div class="card-body">
                    <h3 class="card-title">Store and Manage Photos</h3>
                    <h6 class="card-subtitle mb-2 text-muted">When you sign up for an account, you'll be able to store your photos online</h6>
                    <p class="card-text">By storing your photos, you can re-use them for multiple iCollections, THat way as your collection grows, your work to display it doesnt..</p>
                </div>
            </div>
        </div>

        <div class="col mb-4">
            <div class="card">
                <img src="img/editing_feature.png" class="card-img-top" alt="...">
                <div class="card-body">
                    <h3 class="card-title">Save and Edit your iCollections</h3>
                    <h6 class="card-subtitle mb-2 text-muted">Let your iCollection change overtime with ease.</h6>
                    <p class="card-text">You can edit your existing iCollection so that when you need to add another item, you simply add that one item, with no additional work.</p>
                </div>
            </div>
        </div>


        <div class="col mb-4">
            <div class="card">
                <img src="img/share_feature.png" class="card-img-top" alt="...">
                <div class="card-body">
                    <h3 class="card-title">Publish and Share your iCollections</h3>
                    <h6 class="card-subtitle mb-2 text-muted">iCollection can be private if you wish, or you can publish them and share them with the public or just your friends!</h6>
                    <p class="card-text">You can use the iCollections social media features to publish and share your collections with your friends and followers with ease!</p>
                </div>
            </div>
        </div>
        </div>
    </div>
</section>

<section class="clear-section" id="">
    <div class="container-fluid">
        <h1 class="text-center">How Does it Work?</h1>
        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
            <ol class="carousel-indicators">
                <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
            </ol>
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <h3>Step 1. Upload your photos for your new iCollection.</h3>
                    <h5 class="text-center">You can make an iCollection of anything! What do you collect? What do you want to view as a collection?</h5>
                    <img class="d-block w-100" src="img/upload_photo_sample.jpg" alt="First slide">
                </div>
                <div class="carousel-item">
                    <h3>Step 2. Select an iCollections Environment</h3>
                    <h5 class="text-center">Choose the best way to share your individual collections</h5>
                    <img class="d-block w-100" src="img/collection_selection_example.png" alt="Second slide">
                </div>
                <div class="carousel-item">
                    <h3>Step 3. Review, Edit, and Share your new iCollection with Friends!</h3>
                    <h5 class="text-center">You can also go back and make any changes as your collection grows!</h5>
                    <img class="d-block w-100" src="img/finish_environment_sample.jpg" alt="Third slide">
                </div>
            </div>
            <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>
</section>



<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Sample of 2D environment</h1>
        <div class="row">
            <div class="col-6">
                <h4>Fill any 2D area with as many photos as you want!</h4>
                <p>By storing you images, we can fill a canvas 2D HTML object to compact them all as tight as possible. </p>
            </div>
            <div class="col-6">
                <img src="img/2D_example.jpg" class="landing-image" alt="2D Sample image"/>
            </div>
        </div>
    </div>
</section>

<section class="clear-section" id="">
    <div class="container-fluid">
        <h1>Sample of 3D environment</h1>
        <a href="http://stemkoski.github.io/Three.js/Chase-Camera.html">Basic Example of 3D environment roaming feature created by.</a>
        <a href="https://deanssmart.github.io/the-gallery/">Amazing example of a gallery type environment created by deanssmart</a>
    </div>
</section>

<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Sample of 360 environment</h1>
        
        <a href="https://www.holger-pfaff.de/">Great Live Example Created by Holger.</a>
    </div>
</section>

<section class="clear-section" id="">
    <div class="container-fluid">
        <h1>How we Are Building iCollections</h1>
    </div>
</section>

<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Acknowledgments</h1>
    </div>
</section>





<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Our Current Working Sample.</h1>
        <div>
            <div id="container"></div>

@*            <script src="js/build/three.module.js"></script>
            <script src="js/ocean_environment/jsm/libs/stats.module.js"></script>
            <script src="js/ocean_environment/jsm/controls/OrbitControls.js"></script>
            <script src="js/ocean_environment/jsm/objects/Water.js"></script>
            <script src="js/ocean_environment/jsm/objects/Sky.js"></script>*@

            <script type="module">


                //---second------
                //var THREE = require('../build/three.module.js');
                //var Stats = require('./jsm/libs/stats.module.js');
                //var OrbitControls = require('./jsm/controls/OrbitControls.js');
                //var Water = require('./jsm/objects/Water.js');
                //var Sky = require('./jsm/objects/Sky.js');
                //---original------
                import * as THREE from './js/three.module.js';
                import Stats from './js/stats.module.js';
                import { OrbitControls } from './js/OrbitControls.js';
                import { Water } from './js/Water.js';
                import { Sky } from './js/Sky.js';

                var container, stats;
                var camera, scene, renderer;
                var controls, water, sun, mesh, fish4, fish3, fish2, bluegill, boot, marlin, rockcod, salmon, steelhead, trout;
                var fish4Text,
                    fish3Text,
                    fish2Text,
                    bluegillText,
                    bootText,
                    marlinText,
                    rockcodText,
                    salmonText,
                    steelheadText,
                    troutText;

                init();
                animate();

                function init() {

                    container = document.getElementById('container');

                    //

                    renderer = new THREE.WebGLRenderer();
                    renderer.setPixelRatio(window.devicePixelRatio);
                    renderer.setSize(window.innerWidth, window.innerHeight);
                    container.appendChild(renderer.domElement);

                    //

                    scene = new THREE.Scene();

                    camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 1, 20000);
                    camera.position.set(30, 30, 100);

                    //

                    sun = new THREE.Vector3();

                    // Water

                    var waterGeometry = new THREE.PlaneGeometry(10000, 10000);

                    water = new Water(
                        waterGeometry,
                        {
                            textureWidth: 512,
                            textureHeight: 512,
                            waterNormals: new THREE.TextureLoader().load('./images/waternormals.jpg',
                                function (texture) {

                                    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;

                                }),
                            alpha: 1.0,
                            sunDirection: new THREE.Vector3(),
                            sunColor: 0xffffff,
                            waterColor: 0x001e0f,
                            distortionScale: 3.7,
                            fog: scene.fog !== undefined
                        }
                    );

                    water.rotation.x = - Math.PI / 2;

                    scene.add(water);

                    // Skybox

                    var sky = new Sky();
                    sky.scale.setScalar(10000);
                    scene.add(sky);

                    var skyUniforms = sky.material.uniforms;

                    skyUniforms['turbidity'].value = 10;
                    skyUniforms['rayleigh'].value = 2;
                    skyUniforms['mieCoefficient'].value = 0.005;
                    skyUniforms['mieDirectionalG'].value = 0.8;

                    var parameters = {
                        inclination: 0.49,
                        azimuth: 0.205
                    };

                    var pmremGenerator = new THREE.PMREMGenerator(renderer);

                    function updateSun() {

                        var theta = Math.PI * (parameters.inclination - 0.5);
                        var phi = 2 * Math.PI * (parameters.azimuth - 0.5);

                        sun.x = Math.cos(phi);
                        sun.y = Math.sin(phi) * Math.sin(theta);
                        sun.z = Math.sin(phi) * Math.cos(theta);

                        sky.material.uniforms['sunPosition'].value.copy(sun);
                        water.material.uniforms['sunDirection'].value.copy(sun).normalize();

                        scene.environment = pmremGenerator.fromScene(sky).texture;

                    }

                    updateSun();

                    //Add middle box --------------------

                    // const geometry = new THREE.BoxGeometry( 30, 30, 30 );
                    // const material = new THREE.MeshStandardMaterial( { roughness: 0 } );

                    // mesh = new THREE.Mesh( geometry, material );
                    // scene.add( mesh );

                    // ----------------------------------------------
                    //Custom Upload Photo
                    function uploadImage(collectionPhoto) {
                        // create a canvas element
                        var canvas = document.createElement('canvas');
                        canvas.width = 150;
                        canvas.height = 100;
                        var context = canvas.getContext('2d');
                        // canvas contents will be used for a texture
                        var texture = new THREE.Texture(canvas);

                        // load an image
                        var imageObj = new Image();
                        imageObj.src = collectionPhoto;
                        // after the image is loaded, this function executes
                        imageObj.onload = function () {
                            context.drawImage(imageObj, 0, 0, imageObj.width, imageObj.height, 0, 0, 150, 100);
                            if (texture) // checks if texture exists
                                texture.needsUpdate = true;
                        };

                        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });
                        material.transparent = true;

                        var mesh = new THREE.Mesh(
                            new THREE.PlaneGeometry(canvas.width, canvas.height),
                            material
                        );
                        //scene.add( mesh2 );
                        return mesh
                    }


                    /////// draw text on canvas /////////

                    // create a canvas element
                    function inputText(name, caught, location) {


                        var canvas1 = document.createElement('canvas');
                        canvas1.width = 150;
                        canvas1.height = 75;
                        var context1 = canvas1.getContext('2d');
                        context1.font = "Bold 12px Arial";
                        context1.fillStyle = "rgba(0,0,0)";
                        context1.fillText(name, 20, 30);
                        context1.fillText(caught, 20, 50);
                        context1.fillText(location, 20, 70);

                        // canvas contents will be used for a texture
                        var texture1 = new THREE.Texture(canvas1);
                        texture1.needsUpdate = true;

                        var material1 = new THREE.MeshBasicMaterial({ map: texture1, side: THREE.DoubleSide });
                        material1.transparent = true;

                        var mesh1 = new THREE.Mesh(
                            new THREE.PlaneGeometry(canvas1.width, canvas1.height),
                            material1
                        );

                        return mesh1;
                    }


                    // CUstom text to sign THIRD Attempt END ----------------------------------------------------------------------------

                    // adding fish ---------------------
                    fish4 = uploadImage('./images/fish4.png');
                    fish4.position.set(0, 25, -300);
                    //fish4.rotation.y = Math.PI / 2;
                    //fish4Text = uploadText("WILL THIS WORK!!!")
                    fish4Text = inputText('Trout', "Caught Aug 2017", "Hag Lake Oregon");
                    //fish4Text = createLabel("HELLO WORLD", 24, "black")
                    fish4Text.position.set(0, 130, -300);
                    scene.add(fish4);
                    scene.add(fish4Text);


                    // adding fish ---------------------
                    fish2 = uploadImage('./images/fish2.png');
                    fish2.position.set(300, 25, 0);
                    fish2.rotation.y = Math.PI / 2;
                    fish2Text = inputText('Big Mouth Bass', "Caught Jun 2013", "Vernoia Lake");
                    fish2Text.position.set(300, 130, 0);
                    fish2Text.rotation.y = 4.6;
                    scene.add(fish2);
                    scene.add(fish2Text);

                    // adding fish ---------------------
                    fish3 = uploadImage('./images/fish3.png');
                    fish3.position.set(0, 25, 300);
                    fish3Text = inputText('Big Mouth Bass', "Caught Jun 2013", "Vernoia Lake");
                    fish3Text.position.set(0, 130, 300);
                    fish3Text.rotation.y = 3;
                    scene.add(fish3);
                    scene.add(fish3Text);

                    // adding fish ---------------------
                    marlin = uploadImage('./images/marlin.png');
                    marlin.position.set(-300, 25, 0);
                    marlin.rotation.y = Math.PI / 2;
                    scene.add(marlin);

                    marlinText = inputText('Marlin', "Caught Dec 2016", "Gulf of Mexico");
                    marlinText.position.set(-300, 130, 0);
                    marlinText.rotation.y = 1.3;
                    scene.add(marlinText);

                    // adding fish ---------------------
                    bluegill = uploadImage('./images/bluegill.png');
                    bluegill.position.set(-300, 25, 300);
                    bluegill.rotation.y = -60;
                    scene.add(bluegill);

                    bluegillText = inputText('Bluegill', "Caught May 2009", "Crater Lake");
                    bluegillText.position.set(-300, 130, 300);
                    bluegillText.rotation.y = 2.3;
                    scene.add(bluegillText);

                    // adding fish ---------------------
                    steelhead = uploadImage('./images/steelhead.png');
                    steelhead.position.set(-200, 25, -200);
                    steelhead.rotation.y = 60;
                    scene.add(steelhead);

                    steelheadText = inputText('SteelHead', "Caught Sep 2010", "Columbia River");
                    steelheadText.position.set(-200, 130, -200);
                    steelheadText.rotation.y = .3;
                    scene.add(steelheadText);

                    // adding fish ---------------------
                    boot = uploadImage('./images/boot.png');
                    boot.position.set(200, 25, 200);
                    boot.rotation.y = 60;
                    scene.add(boot);

                    bootText = inputText('Boot', "Caught Feb 2021", "Atlantic Ocean");
                    bootText.position.set(200, 130, 200);
                    bootText.rotation.y = 60;
                    scene.add(bootText);

                    // adding fish ---------------------
                    rockcod = uploadImage('./images/rockcod.png');
                    rockcod.position.set(250, 25, -250);
                    rockcod.rotation.y = 50;
                    scene.add(rockcod);

                    rockcodText = inputText('Rock Cod', "Caught Oct 2017", "Newberg Oregon Coast");
                    rockcodText.position.set(250, 130, -250);
                    rockcodText.rotation.y = 50;
                    scene.add(rockcodText);

                    // ----------------------------------------------
                    controls = new OrbitControls(camera, renderer.domElement);
                    controls.maxPolarAngle = Math.PI * 0.495;
                    controls.target.set(0, 10, 0);
                    controls.minDistance = 40.0;
                    controls.maxDistance = 200.0;
                    controls.update();

                    //

                    stats = new Stats();
                    container.appendChild(stats.dom);

                    // GUI

                    // const gui = new GUI();

                    // const folderSky = gui.addFolder( 'Sky' );
                    // folderSky.add( parameters, 'inclination', 0, 0.5, 0.0001 ).onChange( updateSun );
                    // folderSky.add( parameters, 'azimuth', 0, 1, 0.0001 ).onChange( updateSun );
                    // folderSky.open();

                    // const waterUniforms = water.material.uniforms;

                    // const folderWater = gui.addFolder( 'Water' );
                    // folderWater.add( waterUniforms.distortionScale, 'value', 0, 8, 0.1 ).name( 'distortionScale' );
                    // folderWater.add( waterUniforms.size, 'value', 0.1, 10, 0.1 ).name( 'size' );
                    // folderWater.add( waterUniforms.alpha, 'value', 0.9, 1, .001 ).name( 'alpha' );
                    // folderWater.open();

                    //

                    window.addEventListener('resize', onWindowResize);

                }

                function onWindowResize() {

                    camera.aspect = window.innerWidth / window.innerHeight;
                    camera.updateProjectionMatrix();

                    renderer.setSize(window.innerWidth, window.innerHeight);

                }

                function animate() {

                    requestAnimationFrame(animate);
                    render();
                    stats.update();

                }

                function render() {

                    var time = performance.now() * 0.001;

                    //mesh.position.y = Math.sin( time ) * 20 + 5;
                    fish2.position.y = Math.sin(time) * 20 + 5;
                    fish3.position.y = Math.sin(time - 1) * 20 + 5;
                    fish4.position.y = Math.sin(time - 2) * 20 + 5;

                    bluegill.position.y = Math.sin(time) * 20 + 5;
                    boot.position.y = Math.sin(time - 3) * 20 + 5;
                    marlin.position.y = Math.sin(time - 4) * 20 + 5;

                    rockcod.position.y = Math.sin(time - 5) * 20 + 5;
                    steelhead.position.y = Math.sin(time - 6) * 20 + 5;
                    //mesh.rotation.x = time * 0.5;
                    //mesh.rotation.z = time * 0.51;

                    water.material.uniforms['time'].value += 1.0 / 60.0;

                    renderer.render(scene, camera);

                }

            </script>

        </div>
    </div>
</section>