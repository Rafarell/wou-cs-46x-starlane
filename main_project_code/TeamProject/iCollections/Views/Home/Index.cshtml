@{
    ViewData["Title"] = "Home Page";
}


@*<div class="col">
    <p>@ViewBag.Message</p>
</div>*@

<section class="clear-section" id="landing-area">
    <div class="container-fluid">
        <div class="row">
            <div class="col-6">
                <h1 class="main-title">iCollections</h1>
                <p>The best way to share your collections and collectables</p>
            </div>
            <div class="col-6">
                <img src="img/landing_sample.JPG" class="landing-image" alt="ICollections landing image"/>
            </div>
        </div>
    </div>
</section>

<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Project Purpose and Vision</h1>
        <p>For anyone who wants a easy and fun way to share with others their collections or collectables, the 360 iCollectables Creator can upload and render photos of their collectable items that will be displayed in 2D, 360 degree, or possibly 360 full virtual environment. The system will store the users uploaded photos of items, allow user selection of the available environments, and give the ability to place their items into the environment at specific locations, and then allow others to view their environments filled with their collectable items. Unlike albums of photos our users will be able to show off large collections of items in a single format that can easily show the scale of the collection, while maintaining the ability to inspect individual items closely.</p>
    </div>
</section>

<section class="clear-section" id="">
    <div class="container-fluid">
        <h1 class="text-center">Disclaimer</h1>
        <h3 class="text-center">This Web Application is a Senior Capstone Project</h3>
        <h3 class="text-center">CS 461 & CS 462</h3>
        <h3 class="text-center">Western Oregon University</h3>
        <h3 class="text-center">Our Team Members Include:</h3>
        <hr/>
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5">
            <div class="col mb-4">
                <a href="https://github.com/baltazarO"><strong>Baltazar Ortiz</strong></a>
            </div>
            <div class="col mb-4">
                <a href="https://github.com/reilly-cuauhtemoc-8178"><strong>Cuauhtemoc Reilly</strong></a>
            </div>
            <div class="col mb-4">
                <a href="https://github.com/drussell33"><strong>Derek Russell</strong></a>
            </div>
            <div class="col mb-4">
                <a href="https://github.com/Rafarell"><strong>Rafael Arellano</strong></a>
            </div>
        </div>
    </div>
</section>

<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Description of Features</h1>
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5">
        <div class="col mb-4">
            <div class="card">
                <img src="img/photo_feature.jpg" class="card-img-top" alt="...">
                <div class="card-body">
                    <h3 class="card-title">Store and Manage Photos</h3>
                    <h6 class="card-subtitle mb-2 text-muted">When you sign up for an account, you'll be able to store your photos online</h6>
                    <p class="card-text">By storing your photos, you can re-use them for multiple iCollections, THat way as your collection grows, your work to display it doesnt..</p>
                </div>
            </div>
        </div>

        <div class="col mb-4">
            <div class="card">
                <img src="img/editing_feature.png" class="card-img-top" alt="...">
                <div class="card-body">
                    <h3 class="card-title">Save and Edit your iCollections</h3>
                    <h6 class="card-subtitle mb-2 text-muted">Let your iCollection change overtime with ease.</h6>
                    <p class="card-text">You can edit your existing iCollection so that when you need to add another item, you simply add that one item, with no additional work.</p>
                </div>
            </div>
        </div>


        <div class="col mb-4">
            <div class="card">
                <img src="img/share_feature.png" class="card-img-top" alt="...">
                <div class="card-body">
                    <h3 class="card-title">Publish and Share your iCollections</h3>
                    <h6 class="card-subtitle mb-2 text-muted">iCollection can be private if you wish, or you can publish them and share them with the public or just your friends!</h6>
                    <p class="card-text">You can use the iCollections social media features to publish and share your collections with your friends and followers with ease!</p>
                </div>
            </div>
        </div>
        </div>
    </div>
</section>

<section class="clear-section" id="">
    <div class="container-fluid">
        <h1 class="text-center">How Does it Work?</h1>
        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
            <ol class="carousel-indicators">
                <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
            </ol>
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <h3>Step 1. Upload your photos for your new iCollection.</h3>
                    <h5 class="text-center">You can make an iCollection of anything! What do you collect? What do you want to view as a collection?</h5>
                    <img class="d-block w-100" src="img/upload_photo_sample.jpg" alt="First slide">
                </div>
                <div class="carousel-item">
                    <h3>Step 2. Select an iCollections Environment</h3>
                    <h5 class="text-center">Choose the best way to share your individual collections</h5>
                    <img class="d-block w-100" src="img/collection_selection_example.png" alt="Second slide">
                </div>
                <div class="carousel-item">
                    <h3>Step 3. Review, Edit, and Share your new iCollection with Friends!</h3>
                    <h5 class="text-center">You can also go back and make any changes as your collection grows!</h5>
                    <img class="d-block w-100" src="img/finish_environment_sample.jpg" alt="Third slide">
                </div>
            </div>
            <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>
</section>



<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Sample of 2D environment</h1>
        <div class="row">
            <div class="col-6">
                <h4>Fill any 2D area with as many photos as you want!</h4>
                <p>By storing you images, we can fill a canvas 2D HTML object to compact them all as tight as possible. </p>
            </div>
            <div class="col-6">
                <img src="img/2D_example.jpg" class="landing-image" alt="2D Sample image"/>
            </div>
        </div>
    </div>
</section>

<section class="clear-section" id="">
    <div class="container-fluid">
        <h1>Sample of 3D environment</h1>
        <a href="http://stemkoski.github.io/Three.js/Chase-Camera.html">Basic Example of 3D environment roaming feature created by.</a>
        <a href="https://deanssmart.github.io/the-gallery/">Amazing example of a gallery type environment created by deanssmart</a>
    </div>
</section>

<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Sample of 360 environment</h1>
        
        <a href="https://www.holger-pfaff.de/">Great Live Example Created by Holger.</a>
    </div>
</section>

<section class="clear-section" id="">
    <div class="container-fluid">
        <h1>How we Are Building iCollections</h1>
    </div>
</section>

<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Acknowledgments</h1>
    </div>
</section>





<section class="silver-section" id="">
    <div class="container-fluid">
        <h1>Our Current Working Sample.</h1>
        <div >
            <script src="js/Three.js"></script>
            <script src="js/Detector.js"></script>
            <script src="js/Stats.js"></script>
            <script src="js/OrbitControls.js"></script>
            <script src="js/THREEx.KeyboardState.js"></script>
            <script src="js/THREEx.FullScreen.js"></script>
            <script src="js/THREEx.WindowResize.js"></script>

            <!-- load fonts -->
            <script src="fonts/gentilis_bold.typeface.js"></script>
            <script src="fonts/gentilis_regular.typeface.js"></script>
            <script src="fonts/optimer_bold.typeface.js"></script>
            <script src="fonts/optimer_regular.typeface.js"></script>
            <script src="fonts/helvetiker_bold.typeface.js"></script>
            <script src="fonts/helvetiker_regular.typeface.js"></script>
            <script src="fonts/droid_sans_regular.typeface.js"></script>
            <script src="fonts/droid_sans_bold.typeface.js"></script>
            <script src="fonts/droid_serif_regular.typeface.js"></script>
            <script src="fonts/droid_serif_bold.typeface.js"></script>

            <!-- ------------------------------------------------------------ -->

            <div id="ThreeJS" style="position: relative;" ></div>
            <script>

// MAIN

// standard global variables
var container, scene, camera, renderer, controls, stats;
var keyboard = new THREEx.KeyboardState();
var clock = new THREE.Clock();
// custom global variables
var cube;

init();
animate();

// FUNCTIONS
function init()
{
	// SCENE
	scene = new THREE.Scene();
	// CAMERA
    var SCREEN_WIDTH = document.getElementById('ThreeJS').clientWidth;
    var SCREEN_HEIGHT = parent.innerHeight;
	var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
	camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
	scene.add(camera);
	camera.position.set(0,150,400);
	camera.lookAt(scene.position);
	// RENDERER
	if ( Detector.webgl )
		renderer = new THREE.WebGLRenderer( {antialias:true} );
	else
		renderer = new THREE.CanvasRenderer();
	renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	container = document.getElementById( 'ThreeJS' );
	container.appendChild( renderer.domElement );
	// EVENTS
	THREEx.WindowResize(renderer, camera);
	THREEx.FullScreen.bindKey({ charCode : 'm'.charCodeAt(0) });

	// CONTROLS
	// MUST REMOVE THIS LINE!!!
	// controls = ...

	// STATS
	stats = new Stats();
	stats.domElement.style.position = 'absolute';
	stats.domElement.style.bottom = '0px';
	stats.domElement.style.zIndex = 100;
	container.appendChild( stats.domElement );
	// LIGHT
	var light = new THREE.PointLight(0xffffff);
	light.position.set(0,250,0);
	scene.add(light);
	// FLOOR
	var floorTexture = new THREE.ImageUtils.loadTexture( 'images/FloorsCheckerboard_S_Normal.jpg' );
	floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;
	floorTexture.repeat.set( 10, 10 );
	var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );
	var floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
	var floor = new THREE.Mesh(floorGeometry, floorMaterial);
	floor.position.y = -0.5;
	floor.rotation.x = Math.PI / 2;
	scene.add(floor);
	// SKYBOX/FOG
	// var skyBoxGeometry = new THREE.CubeGeometry( 10000, 10000, 10000 );
	// var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0x9999ff, side: THREE.BackSide } );
	// var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
	// scene.add(skyBox);
	// scene.fog = new THREE.FogExp2( 0x9999ff, 0.00025 );


	// var axes = new THREE.AxisHelper(100);a
	// scene.add( axes );

	var imagePrefix = "images/dawnmountain-";
	var directions  = ["xpos", "xneg", "ypos", "yneg", "zpos", "zneg"];
	var imageSuffix = ".png";
	var skyGeometry = new THREE.CubeGeometry( 5000, 5000, 5000 );

	var materialArray = [];
	for (var i = 0; i < 6; i++)
		materialArray.push( new THREE.MeshBasicMaterial({
			map: THREE.ImageUtils.loadTexture( imagePrefix + directions[i] + imageSuffix ),
			side: THREE.BackSide
		}));
	var skyMaterial = new THREE.MeshFaceMaterial( materialArray );
	var skyBox = new THREE.Mesh( skyGeometry, skyMaterial );
	scene.add( skyBox );



	////////////
	// CUSTOM //
	////////////

	// create an array with six textures for a cool cube
	var materialArray = [];
	materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'images/xpos.png' ) }));
	materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'images/xneg.png' ) }));
	materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'images/ypos.png' ) }));
	materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'images/yneg.png' ) }));
	materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'images/zpos.png' ) }));
	materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'images/zneg.png' ) }));
	var MovingCubeMat = new THREE.MeshFaceMaterial(materialArray);
	var MovingCubeGeom = new THREE.CubeGeometry( 1, 1, 1, 1, 1, 1, materialArray );
	MovingCube = new THREE.Mesh( MovingCubeGeom, MovingCubeMat );
	MovingCube.position.set(0, 25.1, 0);
	scene.add( MovingCube );

		////////////
	// CUSTOM //
	////////////

	// add 3D text
	var materialFront = new THREE.MeshBasicMaterial( { color: 0xff0000 } );
	var materialSide = new THREE.MeshBasicMaterial( { color: 0x000088 } );
	var materialArray = [ materialFront, materialSide ];
	var textGeom = new THREE.TextGeometry( "My New Trophy Fish iCollection!",
	{
		size: 30, height: 4, curveSegments: 3,
		font: "helvetiker", weight: "bold", style: "normal",
		bevelThickness: 1, bevelSize: 2, bevelEnabled: true,
		material: 0, extrudeMaterial: 1
	});
	// font: helvetiker, gentilis, droid sans, droid serif, optimer
	// weight: normal, bold

	var textMaterial = new THREE.MeshFaceMaterial(materialArray);
	var textMesh = new THREE.Mesh(textGeom, textMaterial );

	textGeom.computeBoundingBox();
	var textWidth = textGeom.boundingBox.max.x - textGeom.boundingBox.min.x;

	textMesh.position.set( -0.5 * textWidth, 50, -100 );
	textMesh.rotation.x = -Math.PI / 4;
	scene.add(textMesh);


		/////// draw image on canvas /////////

	// create a canvas element
	var canvas2 = document.createElement('canvas');
	var context2 = canvas2.getContext('2d');
	// canvas contents will be used for a texture
	var texture2 = new THREE.Texture(canvas2);

	// load an image
	var imageObj = new Image();
	imageObj.src = "images/fish4.png";
	// after the image is loaded, this function executes
	imageObj.onload = function()
	{
		context2.drawImage(imageObj, 10, 10, 155, 63);
		if ( texture2 ) // checks if texture exists
			texture2.needsUpdate = true;
	};

    var material2 = new THREE.MeshBasicMaterial( {map: texture2, side:THREE.DoubleSide} );
    material2.transparent = true;

    var mesh2 = new THREE.Mesh(
        new THREE.PlaneGeometry(canvas2.width, canvas2.height),
        material2
      );
	mesh2.position.set(0,25,-400);
	scene.add( mesh2 );


	// second fish
	// create a canvas element
	var canvas3 = document.createElement('canvas');
	var context3 = canvas3.getContext('2d');
	// canvas contents will be used for a texture
	var texture3 = new THREE.Texture(canvas3);

	// load an image
	var imageObj3 = new Image();
	imageObj3.src = "images/fish3.png";
	// after the image is loaded, this function executes
	imageObj3.onload = function()
	{
		context3.drawImage(imageObj3, 10, 10, 155, 63);
		if ( texture3 ) // checks if texture exists
			texture3.needsUpdate = true;
	};

    var material3 = new THREE.MeshBasicMaterial( {map: texture3, side:THREE.DoubleSide} );
    material3.transparent = true;

    var mesh3 = new THREE.Mesh(
        new THREE.PlaneGeometry(canvas3.width, canvas3.height),
        material3
      );
	mesh3.position.set(150,25,-400);
	scene.add( mesh3 );

	// third fish
	// create a canvas element
	var canvas4 = document.createElement('canvas');
	var context4 = canvas4.getContext('2d');
	// canvas contents will be used for a texture
	var texture4 = new THREE.Texture(canvas4);

	// load an image
	var imageObj4 = new Image();
	imageObj4.src = "images/fish2.png";
	// after the image is loaded, this function executes
	imageObj4.onload = function()
	{
		context4.drawImage(imageObj4, 10, 10, 155, 63);
		if ( texture4 ) // checks if texture exists
			texture4.needsUpdate = true;
	};

    var material4 = new THREE.MeshBasicMaterial( {map: texture4, side:THREE.DoubleSide} );
    material4.transparent = true;

    var mesh4 = new THREE.Mesh(
        new THREE.PlaneGeometry(canvas4.width, canvas4.height),
        material4
      );
	mesh4.position.set(-150,25,-400);
	scene.add( mesh4 );
}

var MovingCube;

function animate()
{
    requestAnimationFrame( animate );
	render();
	update();
}

function update()
{
	var delta = clock.getDelta(); // seconds.
	var moveDistance = 200 * delta; // 200 pixels per second
	var rotateAngle = Math.PI / 2 * delta;   // pi/2 radians (90 degrees) per second

	// local transformations

	// move forwards/backwards/left/right
	if ( keyboard.pressed("W") )
		MovingCube.translateZ( -moveDistance );
	if ( keyboard.pressed("S") )
		MovingCube.translateZ(  moveDistance );
	if ( keyboard.pressed("Q") )
		MovingCube.translateX( -moveDistance );
	if ( keyboard.pressed("E") )
		MovingCube.translateX(  moveDistance );

	// rotate left/right/up/down
	var rotation_matrix = new THREE.Matrix4().identity();
	if ( keyboard.pressed("A") )
		MovingCube.rotateOnAxis( new THREE.Vector3(0,1,0), rotateAngle);
	if ( keyboard.pressed("D") )
		MovingCube.rotateOnAxis( new THREE.Vector3(0,1,0), -rotateAngle);
	if ( keyboard.pressed("R") )
		MovingCube.rotateOnAxis( new THREE.Vector3(1,0,0), rotateAngle);
	if ( keyboard.pressed("F") )
		MovingCube.rotateOnAxis( new THREE.Vector3(1,0,0), -rotateAngle);

	if ( keyboard.pressed("Z") )
	{
		MovingCube.position.set(0,25.1,0);
		MovingCube.rotation.set(0,0,0);
	}

	var relativeCameraOffset = new THREE.Vector3(0,50,200);

	var cameraOffset = relativeCameraOffset.applyMatrix4( MovingCube.matrixWorld );

	camera.position.x = cameraOffset.x;
	camera.position.y = cameraOffset.y;
	camera.position.z = cameraOffset.z;
	camera.lookAt( MovingCube.position );

	//camera.updateMatrix();
	//camera.updateProjectionMatrix();

	stats.update();
}

function render()
{
	renderer.render( scene, camera );
}

            </script>
        </div>
    </div>
</section>