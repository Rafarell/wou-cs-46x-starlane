// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace iCollections.BDDTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FavoriteCollection")]
    public partial class FavoriteCollectionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "FavoriteCollection.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "FavoriteCollection", @"	Favoriting A Collection 

	* If a user is viewing a collection, then there must be an associated ""Favorite Button"" associated with the collection. 
	* If a user is clicks on the favorite button, then the collection must be added to their favorites list.
	* If a user is clicks on the favorite button and the collection is already in their favorites list, then the user must be notified of it. 

 The process of adding a collection to 'My Favorites'", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Visibility",
                        "UserId",
                        "Route"});
            table3.AddRow(new string[] {
                        "10",
                        "First Collection Fish",
                        "1",
                        "8",
                        "Ocean_environment"});
            table3.AddRow(new string[] {
                        "13",
                        "Second Collection Dogs",
                        "1",
                        "64",
                        "gallery_environment"});
            table3.AddRow(new string[] {
                        "16",
                        "Third Collection Shoes",
                        "1",
                        "3",
                        "Ocean_environment"});
            table3.AddRow(new string[] {
                        "45",
                        "Forth Collection Puzzels",
                        "1",
                        "3",
                        "gallery_environment"});
#line 13
 testRunner.Given("the following collections exist", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Visibility",
                        "UserId",
                        "Route"});
            table4.AddRow(new string[] {
                        "0",
                        "Bad Collection 1",
                        "1",
                        "8",
                        "Ocean_environment"});
            table4.AddRow(new string[] {
                        "11",
                        "Worse Collection 2",
                        "1",
                        "0",
                        "gallery_environment"});
            table4.AddRow(new string[] {
                        "15",
                        "HORRIBLE Collection 3",
                        "1",
                        "3",
                        "IMLOST!"});
            table4.AddRow(new string[] {
                        "$0",
                        "kityy Collection 4",
                        "9001",
                        "666",
                        "WTFisHAPPENING!!!1!"});
#line 20
 testRunner.And("the following collections do not exist", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "Email",
                        "FirstName",
                        "LastName",
                        "Password"});
            table5.AddRow(new string[] {
                        "TaliaK",
                        "knott@example.com",
                        "Talia",
                        "Knott",
                        "Hello123#"});
            table5.AddRow(new string[] {
                        "ZaydenC",
                        "clark@example.com",
                        "Zayden",
                        "Clark",
                        "Hello123#"});
            table5.AddRow(new string[] {
                        "DavilaH",
                        "hareem@example.com",
                        "Hareem",
                        "Davila",
                        "Hello123#"});
            table5.AddRow(new string[] {
                        "KrzysztofP",
                        "krzysztof@example.com",
                        "Krzysztof",
                        "Ponce",
                        "Hello123#"});
#line 27
testRunner.Given("the following users exist", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "Email",
                        "FirstName",
                        "LastName",
                        "Password"});
            table6.AddRow(new string[] {
                        "AndreC",
                        "colea@example.com",
                        "Andre",
                        "Cole",
                        "0a9dfi3.a"});
            table6.AddRow(new string[] {
                        "JoannaV",
                        "valdezJ@example.com",
                        "Joanna",
                        "Valdez",
                        "d9u(*dsF4"});
#line 33
 testRunner.And("the following users do not exist", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "userid",
                        "collectionid"});
            table7.AddRow(new string[] {
                        "My Favorites",
                        "1",
                        "16"});
            table7.AddRow(new string[] {
                        "My Favorites",
                        "2",
                        "45"});
            table7.AddRow(new string[] {
                        "My Favorites",
                        "3",
                        "45"});
            table7.AddRow(new string[] {
                        "My Favorites",
                        "4",
                        "13"});
#line 38
testRunner.Given("the following FavoriteCollections exist", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "userid",
                        "collectionid"});
            table8.AddRow(new string[] {
                        "my not so favorites",
                        "6",
                        "2"});
            table8.AddRow(new string[] {
                        "i hate these",
                        "7",
                        "9"});
            table8.AddRow(new string[] {
                        "null",
                        "3",
                        "8"});
            table8.AddRow(new string[] {
                        "i forgot",
                        "4",
                        "3"});
#line 46
 testRunner.And("the following FavoriteCollections do not exist", ((string)(null)), table8, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clicking on the favorites button, the collection will be added to the users list " +
            "if it is not already in my favorites")]
        [NUnit.Framework.TestCaseAttribute("Taliak", "10", null)]
        [NUnit.Framework.TestCaseAttribute("Zaydenc", "16", null)]
        [NUnit.Framework.TestCaseAttribute("Davilah", "45", null)]
        [NUnit.Framework.TestCaseAttribute("Krzysztofp", "16", null)]
        public virtual void ClickingOnTheFavoritesButtonTheCollectionWillBeAddedToTheUsersListIfItIsNotAlreadyInMyFavorites(string firstName, string collections, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("Collections", collections);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clicking on the favorites button, the collection will be added to the users list " +
                    "if it is not already in my favorites", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
#line 57
 testRunner.Given("I am a logged in user with user name \'<username>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.When("I click on add to favorites button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("the corresonping \'<collections>\' will be added to \'<favoritescollection>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
   testRunner.And("I will be notified of it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clicking on the favorites button, if collection is already in a user\'s favorites " +
            "list, the user must be notified of it and the collection will not be added.")]
        [NUnit.Framework.TestCaseAttribute("Taliak", "10", null)]
        [NUnit.Framework.TestCaseAttribute("Zaydenc", "16", null)]
        [NUnit.Framework.TestCaseAttribute("Davilah", "45", null)]
        [NUnit.Framework.TestCaseAttribute("Krzysztofp", "16", null)]
        public virtual void ClickingOnTheFavoritesButtonIfCollectionIsAlreadyInAUsersFavoritesListTheUserMustBeNotifiedOfItAndTheCollectionWillNotBeAdded_(string firstName, string collections, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("Collections", collections);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clicking on the favorites button, if collection is already in a user\'s favorites " +
                    "list, the user must be notified of it and the collection will not be added.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
#line 70
 testRunner.Given("I am a logged in user with user name \'<username>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.When("I click on add to favorites button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
  testRunner.And("the collection is already in \'<favoritecollections>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.Then("the \'<collections>\' will not be added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
  testRunner.And("I will be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
