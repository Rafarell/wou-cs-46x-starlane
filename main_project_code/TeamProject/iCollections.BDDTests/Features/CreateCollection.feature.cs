// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace iCollections.BDDTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CreateCollection")]
    public partial class CreateCollectionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CreateCollection.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CreateCollection", @"	Creating A Collection 

	* As a user of this site with an account that is currently using the site, the user should not receive any cookie error messages from the web console available in their web browser. 
	* As a user of this site that is in the process of creating a collection, a tempdata cookie will appear, and then disposed of when the user continues using the site.
	* As a user of this site that is creating a collection, I want instructions for the accepted input for titles and descriptions, with clear error messages if I use an unaccepted character. 

Going through the process from logging in,  to publishing a newly made iCollection. ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Data",
                        "UserId",
                        "PhotoGuid"});
            table1.AddRow(new string[] {
                        "40",
                        "Photo Fish 1",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "41",
                        "Photo Fish 2",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "45",
                        "Photo Shoes 1",
                        "new byte[] {1,2,3}",
                        "3",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "48",
                        "Photo Dogs 1",
                        "new byte[] {1,2,3}",
                        "64",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "50",
                        "Photo Fish 3",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "51",
                        "Photo Fish 4",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "52",
                        "Photo Shoes 2",
                        "new byte[] {1,2,3}",
                        "3",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "53",
                        "Photo Dogs 2",
                        "new byte[] {1,2,3}",
                        "64",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "54",
                        "Photo Fish 5",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "55",
                        "Photo Fish 6",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "65",
                        "Photo Shoes 3",
                        "new byte[] {1,2,3}",
                        "3",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "66",
                        "Photo Dogs 3",
                        "new byte[] {1,2,3}",
                        "64",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "62",
                        "Photo Fish 7",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "87",
                        "Photo Fish 8",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "88",
                        "Photo Shoes 4",
                        "new byte[] {1,2,3}",
                        "3",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "89",
                        "Photo Dogs 4",
                        "new byte[] {1,2,3}",
                        "64",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "90",
                        "Photo Fish 9",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "91",
                        "Photo Fish 10",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "92",
                        "Photo Shoes 5",
                        "new byte[] {1,2,3}",
                        "3",
                        "new Guid()"});
            table1.AddRow(new string[] {
                        "93",
                        "Photo Dogs 5",
                        "new byte[] {1,2,3}",
                        "64",
                        "new Guid()"});
#line 13
 testRunner.Given("the following photos exist", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Data",
                        "UserId",
                        "PhotoGuid"});
            table2.AddRow(new string[] {
                        "0",
                        "First Photo Bad",
                        "new byte[] {1,2,3}",
                        "4",
                        "new Guid()"});
            table2.AddRow(new string[] {
                        "-1",
                        "Second Photo Bad",
                        "new byte[] {1,2,3}",
                        "8",
                        "new Guid()"});
            table2.AddRow(new string[] {
                        "16",
                        "Third Photo Bad",
                        "new byte[] {1,2,3}",
                        "0",
                        "new Guid()"});
            table2.AddRow(new string[] {
                        "45",
                        "Fourth Photo Bad",
                        "9001",
                        "64",
                        "new Guid()"});
#line 36
 testRunner.And("the following photos do not exist", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clicking on The Create Collection button in the nav bar will direct to the enviro" +
            "nment selection page.")]
        [NUnit.Framework.TestCaseAttribute("Talia", "EnvironmentSelection", null)]
        [NUnit.Framework.TestCaseAttribute("Zayden", "EnvironmentSelection", null)]
        [NUnit.Framework.TestCaseAttribute("Hareem", "EnvironmentSelection", null)]
        [NUnit.Framework.TestCaseAttribute("Krzysztof", "EnvironmentSelection", null)]
        public virtual void ClickingOnTheCreateCollectionButtonInTheNavBarWillDirectToTheEnvironmentSelectionPage_(string firstName, string page, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("Page", page);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clicking on The Create Collection button in the nav bar will direct to the enviro" +
                    "nment selection page.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
#line 46
 testRunner.Given(string.Format("I am a logged in user with first name \'{0}\'", firstName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
 testRunner.When("I Click Create new Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.Then(string.Format("I am redirected to the \'{0}\' page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
   testRunner.And("I can see the two differnt environment options for me to select", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non-user cannot click on The Create Collection button in the nav bar will direct " +
            "to the environment selection page.")]
        [NUnit.Framework.TestCaseAttribute("Andre", null)]
        [NUnit.Framework.TestCaseAttribute("Joanna", null)]
        [NUnit.Framework.TestCaseAttribute("People", null)]
        public virtual void Non_UserCannotClickOnTheCreateCollectionButtonInTheNavBarWillDirectToTheEnvironmentSelectionPage_(string firstName, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non-user cannot click on The Create Collection button in the nav bar will direct " +
                    "to the environment selection page.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
#line 59
 testRunner.Given(string.Format("I am a logged in user with first name \'{0}\'", firstName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
 testRunner.When("I Click Create new Collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("I can see a 404 error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
